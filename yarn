#!/bin/bash
# 
# A wrapper for `yarn` which also installs and activates the appropriate version
# of `node` and `yarn` using `nvm`, which is also installed if missing.
#
set -euo pipefail;
shopt -s globstar nullglob;
pushd "$(dirname "${BASH_SOURCE}")" > /dev/null;

if [ -z "${npm_package_name:-}" ]; then
  echo "ðŸ§¶ Preparing and activating Node/Yarn environment..." 1>&2;

  if [ ! -e "${HOME}/.nvm/nvm.sh" ]; then
    echo "ðŸ§¶ Installing Node Version Manager (nvm)..." 1>&2;
    mkdir -p ~/.nvm;
    pushd ~/.nvm;
    wget https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.3/install.sh -O install-v0.35.3.bash -q;
    echo f068e17dacb88f73302790cc076956c7a0d459ce9b01df842ff3e75744f9e2fe install-v0.35.3.bash | sha256sum --check 1>&2;
    bash install-v0.35.3.bash;
    popd;
  fi

  . ~/.nvm/nvm.sh;

  source "${HOME}/.nvm/nvm.sh";
  if [ -z "$(nvm which default)" ]; then
    echo "ðŸ§¶ Installing any Node..." 1>&2;
    nvm install stable;
    nvm use stable;
  else
    nvm use default 1>/dev/null 2>/dev/null;
  fi

  node_version="$(node -p 'require("./package.json").engines.node')";
  
  if [ -z "$(nvm which ${node_version})" ]; then
    echo "ðŸ§¶ Installing Node ${node_version}..." 1>&2;
    nvm install "${node_version}";
  fi
  
  nvm use "${node_version}" 1>/dev/null 2>/dev/null

  if ! nvm exec "${node_version}" yarn --version 1>/dev/null 2>/dev/null; then
    echo "ðŸ§¶ Installing Yarn..." 1>&2;
    npm install -g yarn;
  fi

  yarn_version="$(yarn --version)";

  echo "ðŸ§¶ Using Node ${node_version} and Yarn ${yarn_version}." 1>&2;
else
  echo "ðŸ§¶ Already in an NPM/Yarn script, assuming Node/Yarn environment is valid." 1>&2;
fi

popd > /dev/null;

exec yarn "$@";
