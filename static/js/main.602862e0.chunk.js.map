{"version":3,"sources":["components/global-styles.tsx","components/splashy-greeting.tsx","utilities/async.tsx","components/form.tsx","components/printed.tsx","utilities/print.tsx","utilities/input.tsx","utilities/random.tsx","utilities/regex.tsx","core/main.tsx","index.tsx"],"names":["GlobalStyles","styles","emotionReact","fontSize","whiteSpace","html","boxSizing","body","padding","margin","fontFamily","transitionDuration","a","color","display","img","verticalAlign","SplashyGreeting","name","className","css","transition","animationName","keyframes","background","animationDuration","animationIterationCount","fontWeight","sleep","seconds","Promise","resolve","setTimeout","NEVER","_resolve","_reject","Form","children","onSubmit","disabled","setDisabled","useState","event","preventDefault","nativeEvent","data","FormData","target","submitter","querySelector","submitterName","has","value","placeholder","textContent","append","blur","Printed","values","inline","printed","map","i","React","isValidElement","key","Object","fromEntries","keys","getAll","json","JSON","stringify","length","slice","error","console","border","toString","stack","textShadow","opacity","animationTimingFunction","animationFillMode","printInline","print","assign","shift","debug","oldMax","document","documentElement","scrollHeight","window","innerHeight","atBottom","scrollTop","container","createElement","style","getElementById","appendChild","ReactDOM","render","StrictMode","flatMap","as","newMax","Symbol","formInput","async","inputs","entries","File","input","child","autoFocus","Missing","randomChoice","emptyDefault","valueArray","Error","min","max","generated","range","possibleResultValues","maxUnbiased","maxGeneratedValue","Number","isInteger","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","crypto","getRandomValues","Uint32Array","randomInteger","exec","XRegExp","re","tag","reg","App","href","title","doGettingStartedMessage","doGreeting","showARandomMagicCard","requireTermsOfService","anotherFormExample","doMagicArenaLogThing","performance","now","position","top","borderBottom","boxShadow","zIndex","alt","src","height","width","objectFit","backgroundSize","backgroundImage","objectPosition","toFixed","padStart","maxWidth","lineHeight","h1","ol","paddingLeft","li","borderRadius","code","userSelect","cursor","required","minLength","cards","default","card","image_uri","x","arena_id","files","type","multiple","accept","onChange","el","hidden","form","click","removeChild","logFiles","all","file","lastModified","text","TextDecoder","decode","arrayBuffer","sort","b","messageDivider","messageParts","logs","split","message","match","regex","logger","trim","parse","undefined","responses","log","startsWith","payload","collection","cardId","count","warn","app","root","main","done","race","then","requestAnimationFrame"],"mappings":"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","file":"static/js/main.602862e0.chunk.js","sourcesContent":["import * as emotionReact from \"@emotion/core\";\nimport React from \"react\";\n\n/**\n * Global style definitions that are applied throughout the entire document.\n */\nexport let GlobalStyles = () => (\n  <emotionReact.Global\n    styles={emotionReact.css({\n      \"input, textarea, button, select\": {\n        fontSize: \"inherit\"\n      },\n\n      \"code, pre, kbd\": {\n        fontSize: \"inherit\",\n        whiteSpace: \"pre-wrap\"\n      },\n\n      html: {\n        boxSizing: \"border-box\"\n      },\n\n      body: {\n        padding: \"0\",\n        margin: \"0\",\n        fontSize: \"16px\"\n      },\n\n      \"*\": {\n        boxSizing: \"inherit\",\n        fontFamily: \"inherit\",\n        transitionDuration: \"inherit\"\n      },\n\n      a: {\n        color: \"blue\",\n\n        \":hover\": {\n          color: \"red\"\n        }\n      },\n\n      \"body > section\": {\n        display: \"contents\"\n      },\n\n      \"body > section > *\": {\n        transitionDuration: \"0.5s\"\n      },\n\n      img: {\n        verticalAlign: \"middle\"\n      }\n    })}\n  />\n);\n","import { css, keyframes } from \"emotion\";\nimport React from \"react\";\n\nexport let SplashyGreeting = ({ name }: { name: string }) => {\n  return (\n    <div\n      className={css({\n        transition: \"none\",\n        animationName: keyframes({\n          \"0%\": {\n            background: \"lime\"\n          },\n          \"10%\": {\n            background: \"magenta\"\n          },\n          \"50%\": {\n            background: \"magenta\"\n          },\n          \"60%\": {\n            background: \"lime\"\n          },\n          \"100%\": {\n            background: \"lime\"\n          }\n        }),\n        animationDuration: \"6s\",\n        animationIterationCount: \"4\",\n        background: \"lime\",\n        color: \"black\",\n        fontWeight: 900,\n        fontSize: \"32px\",\n        padding: \"32px\"\n      })}\n    >\n      <p>Welcome, {name}!</p>\n    </div>\n  );\n};\n","/**\n * Returns a promise that is resolved after waiting for a number of seconds.\n */\nexport let sleep = (seconds: number): Promise<void> =>\n  new Promise((resolve) => setTimeout(resolve, seconds * 1000));\n\n/**\n * A promise that will never settle/resolve/reject; it will be pending forever.\n */\nexport let NEVER: Promise<never> = new Promise((_resolve, _reject) => {});\n","import { css } from \"emotion\";\nimport React, { ReactNode, useState } from \"react\";\n\nexport let Form = ({\n  children,\n  onSubmit\n}: {\n  children: ReactNode;\n  onSubmit: (data: FormData) => void;\n}) => {\n  let [disabled, setDisabled] = useState(false);\n\n  return (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n\n        let nativeEvent: any = event.nativeEvent;\n        let data = new FormData(nativeEvent.target);\n        let submitter: HTMLInputElement | undefined =\n          nativeEvent.submitter ||\n          nativeEvent.target.querySelector(\"fieldset :enabled\");\n        let submitterName = submitter?.name || \"value\";\n        if (submitter && !data.has(submitterName)) {\n          let value =\n            submitter.value ||\n            submitter.placeholder ||\n            submitter.textContent ||\n            \"\";\n          data.append(submitterName, value);\n        }\n        setDisabled(true);\n        if (submitter) {\n          submitter.blur();\n        }\n        onSubmit(data);\n      }}\n    >\n      <fieldset\n        disabled={disabled}\n        className={css({\n          display: \"contents\"\n        })}\n      >\n        {children}\n      </fieldset>\n    </form>\n  );\n};\n","import { css, keyframes } from \"emotion\";\nimport React, { ReactNode } from \"react\";\n\n/**\n * Renders a value that's been printed, with an animation to draw attention to the change.\n */\nexport let Printed = ({\n  values,\n  inline\n}: {\n  values: Array<ReactNode | any>;\n  inline?: boolean;\n}) => (\n  <div\n    className={css(\n      printed,\n      inline\n        ? {\n            display: \"inline\",\n            margin: 2\n          }\n        : {}\n    )}\n  >\n    {values.map((value, i) => {\n      if (\n        React.isValidElement(value) ||\n        typeof value == \"string\" ||\n        typeof value == \"number\"\n      ) {\n        return <span key={i}>{value}</span>;\n      } else {\n        if (value instanceof FormData) {\n          value = Object.fromEntries(\n            [...value.keys()].map((key) => [key, value.getAll(key)])\n          );\n        }\n        try {\n          let json = JSON.stringify(value, null, 2);\n          if (json && json.length > 512) {\n            json = json.slice(0, 512) + \"… (truncated)\";\n          }\n          return <code key={i}>{json}</code>;\n        } catch (error) {\n          console.error(error);\n          return (\n            <pre\n              key={i}\n              className={css({\n                color: \"maroon\",\n                padding: \"8px\",\n                border: \"3px double red\",\n                background: \"white\"\n              })}\n            >\n              {error.toString()}\n              {\"\\n\"}\n              {error.stack}\n            </pre>\n          );\n        }\n      }\n    })}\n  </div>\n);\n\nlet printed = css({\n  transition: \"none\",\n  margin: 16,\n  textShadow: \"0 0 0 rgba(0, 0, 0, 0)\",\n  color: \"rgba(0, 0, 0, 1.0)\",\n  animationName: `${keyframes({\n    \"0%\": {\n      textShadow: \"0 0 16px rgba(0, 0, 0, 0)\",\n      color: \"rgba(0, 0, 0, 0)\",\n      opacity: 0.0\n    },\n    \"40%\": {\n      textShadow: \"0 0 4px black\",\n      color: \"rgba(0, 0, 0, 0)\",\n      opacity: 1.0\n    },\n    \"60%\": {\n      textShadow: \"0 0 4px rgba(0, 0, 0, 0.25)\",\n      color: \"rgba(0, 0, 0, 0.5)\",\n      opacity: 1.0\n    },\n    \"100%\": {\n      textShadow: \"0 0 32px rgba(0, 0, 0, 0)\",\n      color: \"rgba(0, 0, 0, 1.0)\",\n      opacity: 1.0\n    }\n  })}`,\n  animationDuration: \"0.25s\",\n  animationTimingFunction: \"ease-in-out\",\n  animationIterationCount: 1,\n  animationFillMode: \"forwards\"\n});\n","import React, { ReactNode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { Printed } from \"../components/printed\";\n\nexport let printInline = (...values: Array<ReactNode | unknown>) =>\n  print(print.inline, ...values);\n\n/**\n * Prints one or more values at the bottom of the document. Scrolling sticks to\n * he bottom of the document unless the user how scrolled up.\n *\n * The values may be of any type, and will be properly rendered if they are\n * DOM elements, React components, or if they implement the `[print.as]` method.\n * Otherwise they will be displayed as text or JSON.\n */\nexport let print = Object.assign(\n  (...values: Array<ReactNode | unknown>): void => {\n    let inline = false;\n    if (values[0] === print.inline) {\n      inline = true;\n      values.shift();\n    }\n    console.debug(...values);\n\n    let oldMax = document.documentElement.scrollHeight - window.innerHeight;\n    let atBottom = document.documentElement.scrollTop >= oldMax - 4;\n\n    let container = document.createElement(\"article\");\n    container.style.display = \"contents\";\n    document.getElementById(\"prints\").appendChild(container);\n\n    ReactDOM.render(\n      <React.StrictMode>\n        <Printed\n          inline={inline}\n          values={values.flatMap((value) => {\n            while (typeof value?.[print.as] === \"function\") {\n              value = value[print.as]();\n            }\n            return value;\n          })}\n        />\n      </React.StrictMode>,\n      container\n    );\n\n    let newMax = document.documentElement.scrollHeight - window.innerHeight;\n\n    if (atBottom) {\n      document.documentElement.scrollTop = newMax;\n    }\n  },\n  {\n    /**\n     * Symbolic method name used to override display of a printed value.\n     *\n     * This only applies to values passed-in to print directly, it won't affect any\n     * internal rendering that takes place within the values.\n     */\n    as: Symbol(\"print.as\"),\n\n    inline: Symbol(\"print.inline\")\n  }\n);\n","import React, { ReactElement, ReactNode } from \"react\";\n\nimport { Form } from \"../components/form\";\nimport { print } from \"../utilities/print\";\n\n/**\n * Displays a form, and disables it and returns the entered FormData when the\n * user submits it.\n */\nexport let formInput = async (children: ReactNode): Promise<FormData> =>\n  new Promise((resolve) => {\n    print(<Form onSubmit={resolve}>{children}</Form>);\n  });\n\n/**\n * Returns a Record with the values from each form control by name.\n *\n * If there are duplicate names they will be overwritten, use `formInput`\n * instead if you need to capture those.\n */\nexport let inputs = async (\n  children: ReactNode\n): Promise<Record<string, string>> =>\n  Object.fromEntries(\n    [...(await formInput(children)).entries()].flatMap(([key, value]) => {\n      if (value instanceof File) {\n        return [];\n      } else {\n        return [[key, value]];\n      }\n    })\n  );\n\n/**\n * Returns the value specified with a single form control.\n *\n * Defaults to a text input, optionally with a default string to be used if the\n * input is empty.\n */\nexport let input = async (child?: string | ReactElement): Promise<string> => {\n  if (typeof child === \"string\") {\n    child = <input autoFocus placeholder={child} />;\n  } else if (typeof child === \"undefined\") {\n    child = <input autoFocus />;\n  }\n  return (await inputs(child)).value || \"\";\n};\n","/**\n * Placeholder value used to distinguish missing arguments from `undefined`\n * arguments. (Infrequent, in most cases we want to treat them equivalently.)\n */\nlet Missing = Symbol(\"Missing\");\n\n/**\n * Generates a random number between 0 (inclusive) and 1 (exclusive).\n */\nexport let randomFraction = () => {\n  return Math.random();\n};\n\n/**\n * Generates a random integer in the specified inclusive range.\n *\n * This cryptographically-safe uniformly-distributed implementation is overkill\n * but it should still be more than fast enough for our purposes.\n *\n * Based on https://stackoverflow.com/a/55544949.\n */\nexport let randomInteger = (min: number, max: number): number => {\n  let range = max - min;\n  let maxGeneratedValue = 0xffffffff;\n  let possibleResultValues = range + 1;\n  let possibleGeneratedValues = maxGeneratedValue + 1;\n  let remainder = possibleGeneratedValues % possibleResultValues;\n  let maxUnbiased = maxGeneratedValue - remainder;\n\n  if (\n    !Number.isInteger(min) ||\n    !Number.isInteger(max) ||\n    max > Number.MAX_SAFE_INTEGER ||\n    min < Number.MIN_SAFE_INTEGER\n  ) {\n    throw new Error(\"Arguments must be safe integers, but were out of bounds.\");\n  } else if (range > maxGeneratedValue) {\n    throw new Error(\n      `Range of ${range} (from ${min} to ${max}) > ${maxGeneratedValue}.`\n    );\n  } else if (max < min) {\n    throw new Error(`max (${max}) must be >= min (${min}).`);\n  } else if (min === max) {\n    return min;\n  }\n\n  let generated;\n  do {\n    generated = crypto.getRandomValues(new Uint32Array(1))[0];\n  } while (generated > maxUnbiased);\n\n  return min + (generated % possibleResultValues);\n};\n\n/**\n * Chooses and returns an element at random from an array or other iterable.\n *\n * If the iterable contains no elements, throws an error unless an\n * `emptyDefault` is provided.\n */\nexport let randomChoice = <Value extends unknown = unknown>(\n  values: Array<Value> | Iterable<Value>,\n  emptyDefault: Value | typeof Missing = Missing\n): Value => {\n  let valueArray = [...values];\n\n  if (valueArray.length === 0) {\n    if (emptyDefault === Missing) {\n      throw new Error(\n        \"attempted to take randomChoice() from an empty iterable\"\n      );\n    } else {\n      return emptyDefault as Value;\n    }\n  }\n\n  return valueArray[randomInteger(0, valueArray.length - 1)];\n};\n","import XRegExp from \"xregexp\";\n\nexport let exec = XRegExp.exec;\nexport let re = XRegExp.tag(\"nsx\");\nexport let reg = XRegExp.tag(\"nsxg\");\n","import { css } from \"emotion\";\nimport React from \"react\";\n\nimport { GlobalStyles } from \"../components/global-styles\";\nimport { SplashyGreeting } from \"../components/splashy-greeting\";\nimport { NEVER, sleep } from \"../utilities/async\";\nimport { formInput, input, inputs } from \"../utilities/input\";\nimport { print, printInline } from \"../utilities/print\";\nimport { randomChoice } from \"../utilities/random\";\nimport * as regex from \"../utilities/regex\";\nimport { re, reg } from \"../utilities/regex\";\n\nexport class App {\n  /**\n   * The top-level entry point running our application. You can use `print` to\n   * output any type of content at the bottom of the page.\n   */\n  async main() {\n    let icon = document.getElementById(\"icon\") as HTMLLinkElement;\n    icon.href = \"/icon.png\";\n\n    document.title = \"Your Project\";\n\n    await doGettingStartedMessage();\n\n    await doGreeting();\n\n    await showARandomMagicCard();\n\n    await requireTermsOfService();\n\n    await anotherFormExample();\n\n    await doMagicArenaLogThing();\n\n    return NEVER;\n  }\n\n  /**\n   * Generates the interface of our application that we want to display every\n   * frame for as long as main() is running. This is displayed at the top of\n   * the page, above any `print()` output.\n   *\n   * Please note that normally, React components only update if their properties\n   * or state are changed in a way that React is directly aware of, but we are\n   * manually forcing a re-render every frame here to allow us to ignore those\n   * elements of React initially.\n   */\n  render(): React.ReactNode {\n    let seconds = performance.now() / 1000;\n    let textShadow = \"none\";\n    if (seconds > 2 && seconds < 8) {\n      textShadow = \"4px 6px 4px rgb(200, 200, 200)\";\n    }\n\n    return (\n      <>\n        <main\n          className={css({\n            position: \"sticky\",\n            top: \"0px\",\n            padding: \"16px\",\n            fontWeight: \"bold\",\n            color: \"rgb(0, 25, 100)\",\n            borderBottom: \"3px solid black\",\n            boxShadow: \"0 1px 3px rgba(0, 0, 0, 0.5)\",\n            background: \"#FFFFF8\",\n            zIndex: 100,\n            textShadow\n          })}\n        >\n          <a href=\"/\">\n            <img\n              alt=\"\"\n              src=\"/icon.png\"\n              className={css({\n                transition: \"none\",\n                height: 32,\n                width: 32,\n                objectFit: \"contain\",\n                // This is silly hack to replace images in CSS.\n                // see https://stackoverflow.com/a/37124764\n                backgroundSize: \"contain\",\n                backgroundImage: \"url(/icon-shiny.png)\",\n                \":hover\": {\n                  objectPosition: \"-65536px 65536px\"\n                }\n              })}\n            />\n          </a>\n          It has been <code>{seconds.toFixed(0).padStart(3, \"0\")}</code>{\" \"}\n          seconds.\n        </main>\n\n        <GlobalStyles />\n      </>\n    );\n  }\n}\n\nlet doGettingStartedMessage = async () => {\n  print(\n    <section\n      className={css({\n        border: \"3px dashed navy\",\n        padding: \"16px\",\n        maxWidth: \"720px\",\n        lineHeight: \"1.75\",\n\n        h1: {\n          fontSize: \"32px\",\n          margin: 0\n        },\n\n        ol: {\n          margin: 0,\n          paddingLeft: 0,\n\n          li: {\n            margin: \"8px 32px\"\n          }\n        },\n\n        \"code, pre\": {\n          background: \"rgba(0, 0, 0, 0.03)\",\n          border: \"1px solid rgba(0, 0, 0, 0.03)\",\n          borderRadius: \"4px\",\n          padding: \"0 4px\"\n        },\n\n        code: {\n          userSelect: \"all\",\n          cursor: \"pointer\"\n        }\n      })}\n    >\n      <h1>Getting Started</h1>\n      <ol>\n        <li>\n          <a href=\"https://github.com/otter-academy/template/generate\">\n            Create a repository from this template on GitHub\n          </a>\n          , clone it to your computer (or run <code>yarn create in</code>), and{\" \"}\n          <code>cd</code> into it in a Linux shell.\n        </li>\n        <li>\n          Run <code>source ./yarn install</code> to install everything required\n          for this project, including{\" \"}\n          <a href=\"https://github.com/nvm-sh/nvm\">Node Version Manager</a> and\n          all dependencies.\n        </li>\n        <li>\n          Open this project folder in{\" \"}\n          <a href=\"https://code.visualstudio.com/\">Visual Studio Code</a>.\n          Install the recommended extensions if prompted.\n        </li>\n        <li>\n          Run <code>./yarn start</code> in your shell to launch the local\n          development server.\n        </li>\n        <li>\n          You will probably want to do most of your work inside the{\" \"}\n          <code>core/</code>, <code>components/</code>, and{\" \"}\n          <code>utilities/</code> subdirectories of <code>src/</code>. A good\n          starting point would be to delete the introductory text you're reading\n          right now from <code>src/core/main.tsx</code>.\n        </li>\n        <li>\n          You can run <code>./yarn pretty</code> to auto-format the code.\n        </li>\n        <li>\n          Run <code>./yarn deploy</code> to install, build, and publish to the\n          web using GitHub Pages.\n        </li>\n      </ol>\n      <p>Some example code continues below.</p>\n    </section>\n  );\n};\n\nlet doGreeting = async () => {\n  print(\"What is your name?\");\n  let name = await input(\"John Smith\");\n\n  print(\"Great! Just a moment...\");\n\n  await sleep(2.0);\n\n  print(<SplashyGreeting name={name} />);\n\n  for (let i = 0; i < 20; i++) {\n    await sleep(0.1);\n    print(i);\n  }\n};\n\nlet requireTermsOfService = async () => {\n  do {\n    print(\"Please accept our terms of service.\");\n  } while (\n    \"accept\" !==\n    (await input(\n      <>\n        <button autoFocus>accept</button>\n        <button>reject</button>\n      </>\n    ))\n  );\n\n  await sleep(0.5);\n};\n\nlet anotherFormExample = async () => {\n  print(\n    await inputs(\n      <>\n        <input\n          name=\"thinking\"\n          placeholder=\"what are you thinking?\"\n          required\n          minLength={1}\n        />\n        <button autoFocus>A</button>\n        <button>B</button>\n        <button>C</button>\n      </>\n    )\n  );\n};\n\nlet showARandomMagicCard = async () => {\n  let cards = (\n    await import(\n      /* webpackChunkName: \"arena.json\" */ \"../data/magic/arena.json\"\n    )\n  ).default;\n  print(`Loaded ${cards.length} cards. Here's one!`);\n\n  let card = randomChoice(cards);\n  print(card);\n  print(\n    <img\n      src={card.image_uri}\n      alt={card.name}\n      className={css({\n        height: 128,\n        width: 128,\n        objectFit: \"contain\"\n      })}\n    />\n  );\n};\n\nlet doMagicArenaLogThing = async () => {\n  let cards = Object.fromEntries(\n    (\n      await import(\n        /* webpackChunkName: \"arena.json\" */ \"../data/magic/arena.json\"\n      )\n    ).default.map((x) => [x.arena_id, x])\n  );\n\n  print(\n    <p\n      className={css({\n        \"code, pre\": {\n          background: \"rgba(0, 0, 0, 0.03)\",\n          border: \"1px solid rgba(0, 0, 0, 0.03)\",\n          borderRadius: \"4px\",\n          padding: \"0 4px\"\n        },\n\n        code: {\n          userSelect: \"all\",\n          cursor: \"pointer\"\n        }\n      })}\n    >\n      Give us some files in{\" \"}\n      <code>\n        %ProgramFiles(x86)%\\Wizards of the Coast\\MTGA\\MTGA_Data\\Logs\\Logs\\*.log\n      </code>\n    </p>\n  );\n\n  let files = (\n    await formInput(\n      <>\n        <input\n          name=\"value\"\n          type=\"file\"\n          {...{ multiple: true, accept: \".log\" }}\n          className={css({\n            \"&:enabled\": {\n              cursor: \"pointer\"\n            }\n          })}\n          onChange={(event) => {\n            let el = Object.assign(document.createElement(\"button\"), {\n              hidden: true\n            });\n            event.target.form.appendChild(el);\n            el.click();\n            event.target.form.removeChild(el);\n          }}\n        />\n      </>\n    )\n  ).getAll(\"value\") as Array<File>;\n\n  let logFiles = (\n    await Promise.all(\n      files.map(async (file) => ({\n        name: file.name,\n        lastModified: file.lastModified,\n        text: new TextDecoder().decode(\n          await (file as {\n            arrayBuffer(): Promise<ArrayBuffer>;\n          }).arrayBuffer()\n        )\n      }))\n    )\n  ).sort((a, b) => a.lastModified - b.lastModified);\n\n  let messageDivider = reg`\\n\\[\\d+\\]\\s+`;\n  let messageParts = re`\n    ^\\s*(\n      \\[ (?<logger> [^\\]]+ ) \\]\n    )?\\s*(\n      (?<text> [^\\{]* )\n    )\\s*(\n      (?<json> \\{ .* \\})\n    )?\\s*$\n  `;\n\n  let logs = logFiles.flatMap((file) =>\n    file.text.split(messageDivider).flatMap((message) => {\n      let match = regex.exec(message, messageParts);\n      if (!match) {\n        return [];\n      }\n      let logger: string | undefined = match.logger?.trim();\n      let text: string | undefined = match.text?.trim();\n      let json: object | undefined = match.json\n        ? JSON.parse(match.json)\n        : undefined;\n      return [{ logger, text, json }];\n    })\n  );\n\n  let responses: Record<string, object> = {};\n  for (let log of logs) {\n    if (log.text?.startsWith(\"<== \") && log.json) {\n      let method = log.text.slice(\"<== \".length);\n      responses[method] = (log.json as any).payload as\n        | Array<unknown>\n        | Record<string, unknown>;\n    }\n  }\n\n  let decks = responses[\"Deck.GetDeckListsV3\"];\n  let collection = responses[\"PlayerInventory.GetPlayerCardsV3\"];\n  let inventory = responses[\"PlayerInventory.GetPlayerInventory\"];\n  let formats = responses[\"PlayerInventory.GetFormats\"];\n  let ranks = responses[\"Event.GetCombinedRankInfo\"];\n  let season = responses[\"Event.GetSeasonAndRankDetail\"];\n\n  void { decks, inventory, formats, ranks, season };\n\n  for (let [cardId, count] of Object.entries(collection)) {\n    let card = cards[cardId];\n    if (!card) {\n      console.warn(\"unknown card id\", cardId);\n      continue;\n    }\n    printInline(\n      <img\n        src={card.image_uri}\n        alt={card.name}\n        className={css({\n          height: 128,\n          width: 92,\n          objectFit: \"contain\"\n        })}\n      />,\n      count !== 1 ? \"x\" + count : \"\"\n    );\n    await sleep(0.05);\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { App } from \"./core/main\";\n\nlet main = async () => {\n  let app = new App();\n  let root = document.getElementById(\"main\");\n  let main = app.main();\n\n  let done = false;\n  while (!done) {\n    ReactDOM.render(<React.StrictMode>{app.render()}</React.StrictMode>, root);\n    done = await Promise.race([\n      main.then(() => true),\n      new Promise<false>((resolve) =>\n        requestAnimationFrame(() => resolve(false))\n      )\n    ]);\n  }\n\n  console.debug(\"main() has exited.\");\n};\n\nmain();\n"],"sourceRoot":""}